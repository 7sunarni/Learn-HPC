#include <stdio.h>
#include <time.h>
#include <stdint.h>
#include <math.h>

__global__ void l2distance(float *a1, float *a2, float *a3)
{
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    a3[i] = (a1[i] - a2[i]) * (a1[i] - a2[i]);
}

int main()
{
    float *hostA1, *hostA2, *hostA3;
    float *deviceA1, *deviceA2, *deviceA3;
    hostA1 = (float *)malloc(sizeof(float) * 4);
    hostA2 = (float *)malloc(sizeof(float) * 4);
    hostA3 = (float *)malloc(sizeof(float) * 4);
    hostA1[0] = 6.0f;
    hostA1[1] = 7.0f;
    hostA1[2] = 8.0f;
    hostA1[3] = 9.0f;

    hostA2[0] = 1.0f;
    hostA2[1] = 2.0f;
    hostA2[2] = 3.0f;
    hostA2[3] = 4.0f;

    cudaMalloc(&deviceA1, sizeof(float) * 4);
    cudaMalloc(&deviceA2, sizeof(float) * 4);
    cudaMalloc(&deviceA3, sizeof(float) * 4);

    cudaMemcpy(deviceA1, hostA1, 4 * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(deviceA2, hostA2, 4 * sizeof(float), cudaMemcpyHostToDevice);

    l2distance<<<1, 4>>>(deviceA1, deviceA2, deviceA3);
    cudaDeviceSynchronize();

    cudaMemcpy(hostA3, deviceA3, 4 * sizeof(float), cudaMemcpyDeviceToHost);

    float sum = 0;
    for (int i = 0; i < 4; i++)
    {
        sum = sum + hostA3[i];
    }

    printf("%f\n", sqrt(sum));
}
